/// <reference types="node" />
import type { constants } from '../../constants';
import * as misc from './misc';
import * as opts from './options';
export interface FsPromisesApi {
    constants: typeof constants;
    FileHandle: new (...args: unknown[]) => misc.IFileHandle;
    access(path: misc.PathLike, mode?: number): Promise<void>;
    appendFile(path: misc.TFileHandle, data: misc.TData, options?: opts.IAppendFileOptions | string): Promise<void>;
    chmod(path: misc.PathLike, mode: misc.TMode): Promise<void>;
    chown(path: misc.PathLike, uid: number, gid: number): Promise<void>;
    copyFile(src: misc.PathLike, dest: misc.PathLike, flags?: misc.TFlagsCopy): Promise<void>;
    cp(src: string | URL, dest: string | URL, options?: opts.ICpOptions): Promise<void>;
    lchmod(path: misc.PathLike, mode: misc.TMode): Promise<void>;
    lchown(path: misc.PathLike, uid: number, gid: number): Promise<void>;
    lutimes(path: misc.PathLike, atime: misc.TTime, mtime: misc.TTime): Promise<void>;
    link(existingPath: misc.PathLike, newPath: misc.PathLike): Promise<void>;
    lstat(path: misc.PathLike, options?: opts.IStatOptions