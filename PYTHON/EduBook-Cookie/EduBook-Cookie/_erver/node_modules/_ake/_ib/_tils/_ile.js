iner && container.kind === 219 /* ArrowFunction */) {
        if (hasSyntacticModifier(container, 1024 /* Async */))
          inAsyncFunction = true;
        container = getSuperContainer(
          container,
          /*stopOnFunctions*/
          true
        );
        needToCaptureLexicalThis = languageVersion < 2 /* ES2015 */;
      }
      if (container && hasSyntacticModifier(container, 1024 /* Async */))
        inAsyncFunction = true;
    }
    let nodeCheckFlag = 0;
    if (!container || !isLegalUsageOfSuperExpression(container)) {
      const current = findAncestor(node, (n) => n === container ? "quit" : n.kind === 167 /* ComputedPropertyName */);
      if (current && current.kind === 167 /* ComputedPropertyName */) {
        error2(node, Diagnostics.super_cannot_be_referenced_in_a_computed_property_name);
      } else if (isCallExpression2) {
        error2(node, Diagnostics.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors);
      } else if (!container || !container.parent || !(isClassLike(container.parent) || container.parent.kind === 210 /* ObjectLiteralExpression */)) {
        error2(node, Diagnostics.super_can_only_be_referenced_in_members_of_derived_classes_or_object_literal_expressions);
      } else {
        error2(node, Diagnostics.super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_derived_class);
      }
      return errorType;
    }
    if (!isCallExpression2 && immediateContainer.kind === 176 /* Constructor */) {
      checkThisBeforeSuper(node, container, Diagnostics.super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class);
    }
    if (isStatic(container) || isCallExpression2) {
      nodeCheckFlag = 32 /* SuperStatic */;
      if (!isCallExpression2 && languageVersion >= 2 /* ES2015 */ && languageVersion <= 8 /* ES2021 */ && (isPropertyDeclaration(container) || isClassStaticBlockDeclaration(container))) {
        forEachEnclosingBlockScopeContainer(node.parent, (current) => {
          if (!isSourceFile(current) || isExternalOrCommonJsModule(current)) {
            getNodeLinks(current).flags |= 2097152 /* ContainsSuperPropertyInStaticInitializer */;
          }
        });
      }
    } else {
      nodeCheckFlag = 16 /* SuperInstance */;
    }
    getNodeLinks(node).flags |= nodeCheckFlag;
    if (container.kind === 174 /* MethodDeclaration */ && inAsyncFunction) {
      if (isSuperProperty(node.parent) && isAssignmentTarget(node.parent)) {
        getNodeLinks(container).flags |= 256 /* MethodWithSuperPropertyAssignmentInAsync */;
      } else {
        getNodeLinks(container).flags |= 128 /* MethodWithSuperPropertyAccessInAsync */;
      }
    }
    if (needToCaptureLexicalThis) {
      captureLexicalThis(node.parent, container);
    }
    if (container.parent.kind === 210 /* ObjectLiteralExpression */) {
      if (languageVersion < 2 /* ES2015 */) {
        error2(node, Diagnostics.super_is_only_allowed_in_members_of_object_literal_expressions_when_option_target_is_ES2015_or_higher);
        return errorType;
      } else {
        return anyType;
      }
    }
    const classLikeDeclaration = container.parent;
    if (!getClassExtendsHeritageElement(classLikeDeclaration)) {
      error2(node, Diagnostics.super_can_only_be_referenced_in_a_derived_class);
      return errorType;
    }
    if (classDeclarationExtendsNull(classLikeDeclaration)) {
      return isCallExpression2 ? errorType : nullWideningType;
    }
    const classType = getDeclaredTypeOfSymbol(getSymbolOfDeclaration(classLikeDeclaration));
    const baseClassType = classType && getBaseTypes(classType)[0];
    if (!baseClassType) {
      return errorType;
    }
    if (container.kind === 176 /* Constructor */ && isInConstructorArgumentInitializer(node, container)) {
      error2(node, Diagnostics.super_cannot_be_referenced_in_constructor_arguments);
      return errorType;
    }
    return nodeCheckFlag === 32 /* SuperStatic */ ? getBaseConstructorTypeOfClass(classType) : getTypeWithThisArgument(baseClassType, classType.thisType);
    function isLegalUsageOfSuperExpression(container2) {
      if (isCallExpression2) {
        return container2.kind === 176 /* Constructor */;
      } else {
        if (isClassLike(container2.parent) || container2.parent.kind === 210 /* ObjectLiteralExpression */) {
          if (isStatic(container2)) {
            return container2.kind === 174 /* MethodDeclaration */ || container2.kind === 173 /* MethodSignature */ || container2.kind === 177 /* GetAccessor */ || container2.kind === 178 /* SetAccessor */ || container2.kind === 172 /* PropertyDeclaration */ || container2.kind === 175 /* ClassStaticBlockDeclaration */;
          } else {
            return container2.kind === 174 /* MethodDeclaration */ || container2.kind === 173 /* MethodSignature */ || container2.kind === 177 /* GetAccessor */ || container2.kind === 178 /* SetAccessor */ || container2.kind === 172 /* PropertyDeclaration */ || container2.kind === 171 /* PropertySignature */ || container2.kind === 176 /* Constructor */;
          }
        }
      }
      return false;
    }
  }
  function getContainingObjectLiteral(func) {
    return (func.kind === 174 /* MethodDeclaration */ || func.kind === 177 /* GetAccessor */ || func.kind === 178 /* SetAccessor */) && func.parent.kind === 210 /* ObjectLiteralExpression */ ? func.parent : func.kind === 218 /* FunctionExpression */ && func.parent.kind === 303 /* PropertyAssignment */ ? func.parent.parent : void 0;
  }
  function getThisTypeArgument(type) {
    return getObjectFlags(type) & 4 /* Reference */ && type.target === globalThisType ? getTypeArguments(type)[0] : void 0;
  }
  function getThisTypeFromContextualType(type) {
    return mapType(type, (t) => {
      return t.flags & 2097152 /* Intersection */ ? forEach(t.types, getThisTypeArgument) : getThisTypeArgument(t);
    });
  }
  function getThisTypeOfObjectLiteralFromContextualType(containingLiteral, contextualType) {
    let literal = containingLiteral;
    let type = contextualType;
    while (type) {
      const thisType = getThisTypeFromContextualType(type);
      if (thisType) {
        return thisType;
      }
      if (literal.parent.kind !== 303 /* PropertyAssignment */) {
        break;
      }
      literal = literal.parent.parent;
      type = getApparentTypeOfContextualType(
        literal,
        /*contextFlags*/
        void 0
      );
    }
  }
  function getContextualThisParameterType(func) {
    if (func.kind === 219 /* ArrowFunction */) {
      return void 0;
    }
    if (isContextSensitiveFunctionOrObjectLiteralMethod(func)) {
      const contextualSignature = getContextualSignature(func);
      if (contextualSignature) {
        const thisParameter = contextualSignature.thisParameter;
        if (thisParameter) {
          return getTypeOfSymbol(thisParameter);
        }
      }
    }
    const inJs = isInJSFile(func);
    if (noImplicitThis || inJs) {
      const containingLiteral = getContainingObjectLiteral(func);
      if (containingLiteral) {
        const contextualType = getApparentTypeOfContextualType(
          containingLiteral,
          /*contextFlags*/
          void 0
        );
        const thisType = getThisTypeOfObjectLiteralFromContextualType(containingLiteral, contextualType);
        if (thisType) {
          return instantiateType(thisType, getMapperFromContext(getInferenceContext(containingLiteral)));
        }
        return getWidenedType(contextualType ? getNonNullableType(contextualType) : checkExpressionCached(containingLiteral));
      }
     