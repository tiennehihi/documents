export = createHttpError;

declare const createHttpError: createHttpError.CreateHttpError & createHttpError.NamedConstructors & {
    isHttpError: createHttpError.IsHttpError;
};

declare namespace createHttpError {
    interface HttpError<N extends number = number> extends Error {
        status: N;
        statusCode: N;
        expose: boolean;
        headers?: {
            [key: string]: string;
        } | undefined;
        [key: string]: any;
    }

    type UnknownError = Error | string | { [key: string]: any };

    interface HttpErrorConstructor<N extends number = number> {
        (msg?: string): HttpError<N>;
        new(msg?: string): HttpError<N>;
    }

    interface CreateHttpError {
        <N extends number = number>(arg: N, ...rest: UnknownError[]): HttpError<N>;
        (...rest: UnknownError[]): HttpError;
    }

    type IsHttpError = (error: unknown) => error is HttpError;

    type NamedConstructors =
        & {
            HttpError: HttpErrorConstructor;
        }
    