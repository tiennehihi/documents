opertyChecks = (relation !== comparableRelation || isUnitType(source2)) && !(intersectionState & 2 /* Target */) && source2.flags & (402784252 /* Primitive */ | 524288 /* Object */ | 2097152 /* Intersection */) && source2 !== globalObjectType && target2.flags & (524288 /* Object */ | 2097152 /* Intersection */) && isWeakType(target2) && (getPropertiesOfType(source2).length > 0 || typeHasCallOrConstructSignatures(source2));
        const isComparingJsxAttributes = !!(getObjectFlags(source2) & 2048 /* JsxAttributes */);
        if (isPerformingCommonPropertyChecks && !hasCommonProperties(source2, target2, isComparingJsxAttributes)) {
          if (reportErrors2) {
            const sourceString = typeToString(originalSource.aliasSymbol ? originalSource : source2);
            const targetString = typeToString(originalTarget.aliasSymbol ? originalTarget : target2);
            const calls = getSignaturesOfType(source2, 0 /* Call */);
            const constructs = getSignaturesOfType(source2, 1 /* Construct */);
            if (calls.length > 0 && isRelatedTo(
              getReturnTypeOfSignature(calls[0]),
              target2,
              1 /* Source */,
              /*reportErrors*/
              false
            ) || constructs.length > 0 && isRelatedTo(
              getReturnTypeOfSignature(constructs[0]),
              target2,
              