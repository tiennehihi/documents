s the least gnarly.\n  const maybeReturn = checkIfDisallowedImport(\n    specifier,\n    parsed,\n    parsedParentURL\n  );\n\n  if (maybeReturn) return maybeReturn\n\n  // This must come after checkIfDisallowedImport\n  if (parsed && parsed.protocol === 'node:') return {url: specifier}\n\n  const conditions = getConditionsSet(context.conditions);\n\n  const url = moduleResolve(specifier, new URL(parentURL), conditions, false);\n\n  return {\n    // Do NOT cast `url` to a string: that will work even when there are real\n    // problems, silencing them\n    url: url.href,\n    format: defaultGetFormatWithoutErrors(url, {parentURL})\n  }\n}\n\n/**\n * @typedef {import('./lib/errors.js').ErrnoException} ErrnoException\n */\n\n\n/**\n * Match `import.meta.resolve` except that `parent` is required (you can pass\n * `import.meta.url`).\n *\n * @param {string} specifier\n *   The module specifier to resolve relative to parent\n *   (`/example.js`, `./example.js`, `../example.js`, `some-package`, `fs`,\n *   etc).\n * @param {string} parent\n *   The absolute parent module URL to resolve from.\n *   You must pass `import.meta.url` or something else.\n * @returns {string}\n *   Returns a string to a full `file:`, `data:`, or `node:` URL\n *   to the found thing.\n */\nfunction resolve(specifier, parent) {\n  if (!parent) {\n    throw new Error(\n      'Please pass `parent`: `import-meta-resolve` cannot ponyfill that'\n    )\n  }\n\n  try {\n    return defaultResolve(specifier, {parentURL: parent}).url\n  } catch (error) {\n    // See: <https://github.com/nodejs/node/blob/45f5c9b/lib/internal/modules/esm/initialize_import_meta.js#L34>\n    const exception = /** @type {ErrnoException} */ (error);\n\n    if (\n      (exception.code === 'ERR_UNSUPPORTED_DIR_IMPORT' ||\n        exception.code === 'ERR_MODULE