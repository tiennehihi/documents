  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'RestElement',
  _RestElement?: void,
  argument: Pattern,
  typeAnnotation: ?TypeAnnotation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'ReturnStatement',
  _ReturnStatement?: void,
  argument: ?Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'SequenceExpression',
  _SequenceExpression?: void,
  expression: Array<Expression>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'SpreadElement',
  _SpreadElement?: void,
  argument: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'SpreadProperty',
  _SpreadProperty?: void,
  argument: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'Super',
  _Super?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'SwitchCase',
  _SwitchCase?: void,
  consequent: Array<Statement>,
  test: ?Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'SwitchStatement',
  _SwitchStatement?: void,
  cases: Array<SwitchCase>,
  discriminant: Expression,
  lexical: boolean,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'TaggedTemplateExpression',
  _TaggedTemplateExpression?: void,
  quasi: TemplateLiteral,
  tag: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number},
    start: {column: number, line: number},
  },
  start: number,
  trailingComments: ?Array<Comment>,
} | {
  type: 'TemplateElement',
  _TemplateElement?: void,
  tail: boolean,
  value: {cooked: string, raw: string},
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, 