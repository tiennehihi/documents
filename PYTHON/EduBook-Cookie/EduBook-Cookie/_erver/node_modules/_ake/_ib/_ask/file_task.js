{
          sharedFlowNodes[sharedFlowCount] = sharedFlow;
          sharedFlowTypes[sharedFlowCount] = type;
          sharedFlowCount++;
        }
        flowDepth--;
        return type;
      }
    }
    function getInitialOrAssignedType(flow) {
      const node = flow.node;
      return getNarrowableTypeForReference(
        node.kind === 260 /* VariableDeclaration */ || node.kind === 208 /* BindingElement */ ? getInitialType(node) : getAssignedType(node),
        reference
      );
    }
    function getTypeAtFlowAssignment(flow) {
      const node = flow.node;
      if (isMatchingReference(reference, node)) {
        if (!isReachableFlowNode(flow)) {
          return unreachableNeverType;
        }
        if (getAssignmentTargetKind(node) === 2 /* Compound */) {
          const flowType = getTypeAtFlowNode(flow.antecedent);
          return createFlowType(getBaseTypeOfLiteralType(getTypeFromFlowType(flowType)), isIncomplete(flowType));
        }
        if (declaredType === autoType || declaredType === autoArrayType) {
          if (isEmptyArrayAssignment(node)) {
            return getEvolvingArrayType(neverType);
          }
          const assignedType = getWidenedLiteralType(getInitialOrAssignedType(flow));
          return isTypeAssignableTo(assignedType, declaredType) ? assignedType : anyArrayType;
        }
        const t = isInCompoundLikeAssignment(node) ? getBaseTypeOfLiteralType(declaredType) : declaredType;
        if (t.flags & 1048576 /* Union */) {
          return getAssignmentReducedType(t, getInitialOrAssignedType(flow));
        }
        return t;
      }
      if (containsMatchingReference(reference, node)) {
        if (!isReachableFlowNode(flow)) {
          return unreachableNeverType;
        }
        if (isVariableDeclaration(node) && (isInJSFile(node) || isVarConstLike(node))) {
          const init = getDeclaredExpandoInitializer(node);
          if (init && (init.kind === 218 /* FunctionExpression */ || init.kind === 219 /* ArrowFunction */)) {
            return getTypeAtFlowNode(flow.antecedent);
          }
        }
        return declaredType;
      }
      if (isVariableDeclaration(node) && node.parent.parent.kind === 249 /* ForInStatement */ && (isMatchingReference(reference, node.parent.parent.expression) || optionalChainContainsReference(node.parent.parent.expression, reference))) {
        return getNonNullableTypeIfNeeded(finalizeEvolvingArrayType(getTypeFromFlowType(getTypeAtFlowNode(flow.antecedent))));
      }
      return void 0;
    }
    function narrowTypeByAssertion(type, expr) {
      const node = skipParentheses(
        expr,
        /*excludeJSDocTypeAssertions*/
        true
      );
      if (node.kind === 97 /* FalseKeyword */) {
        return unreachableNeverType;
      }
      if (node.kind === 226 /* BinaryExpression */) {
        if (node.operatorToken.kind === 56 /* AmpersandAmpersandToken */) {
          return narrowTypeByAssertion(narrowTypeByAssertion(type, node.left), node.right);
        }
        if (node.operatorToken.kind === 57 /* BarBarToken */) {
          return getUnionType([narrowTypeByAssertion(type, node.left), narrowTypeByAssertion(type, node.right)]);
        }
      }
      return narrowType(
        type,
        node,
        /*assumeTrue*/
        true
