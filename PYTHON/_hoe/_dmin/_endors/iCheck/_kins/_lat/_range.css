"use strict";
/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformManifest = void 0;
const additional_manifest_entries_transform_1 = require("./additional-manifest-entries-transform");
const errors_1 = require("./errors");
const maximum_size_transform_1 = require("./maximum-size-transform");
const modify_url_prefix_transform_1 = require("./modify-url-prefix-transform");
const no_revision_for_urls_matching_transform_1 = require("./no-revision-for-urls-matching-transform");
async function transformManifest({ additionalManifestEntries, dontCacheBustURLsMatching, fileDetails, manifestTransforms, maximumFileSizeToCacheInBytes, modifyURLPrefix, transformParam, }) {
    const allWarnings = [];
    // Take the array of fileDetail objects and convert it into an array of
    // {url, revision, size} objects, with \ replaced with /.
    const normalizedManifest = fileDetails.map((fileDetails) => {
        return {
            url: fileDetails.file.replace(/\\/g, '/'),
            revision: fileDetails.hash,
            size: fileDetails.size,
        };
    });
    const transformsToApply = [];
    if (maximumFileSi