   const exportAssignment = find(statements, isExportAssignment);
        const nsIndex = findIndex(statements, isModuleDeclaration);
        let ns = nsIndex !== -1 ? statements[nsIndex] : void 0;
        if (ns && exportAssignment && exportAssignment.isExportEquals && isIdentifier(exportAssignment.expression) && isIdentifier(ns.name) && idText(ns.name) === idText(exportAssignment.expression) && ns.body && isModuleBlock(ns.body)) {
          const excessExports = filter(statements, (s) => !!(getEffectiveModifierFlags(s) & 32 /* Export */));
          const name = ns.name;
          let body = ns.body;
          if (length(excessExports)) {
            ns = factory.updateModuleDeclaration(
              ns,
              ns.modifiers,
              ns.name,
              body = factory.updateModuleBlock(
                body,
                factory.createNodeArray([
                  ...ns.body.statements,
                  factory.createExportDeclaration(
                    /*modifiers*/
                    void 0,
                    /*isTypeOnly*/
                    false,
                    factory.createNamedExports(map(flatMap(excessExports, (e) => getNamesOfDeclarat