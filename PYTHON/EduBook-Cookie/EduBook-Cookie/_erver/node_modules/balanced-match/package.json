  if (moduleSymbol.flags & targetMeaning) {
          links.resolvedType = resolveImportSymbolType(node, links, moduleSymbol, targetMeaning);
        } else {
          const errorMessage = targetMeaning === 111551 /* Value */ ? Diagnostics.Module_0_does_not_refer_to_a_value_but_is_used_as_a_value_here : Diagnostics.Module_0_does_not_refer_to_a_type_but_is_used_as_a_type_here_Did_you_mean_typeof_import_0;
          error2(node, errorMessage, node.argument.literal.text);
          links.resolvedSymbol = unknownSymbol;
          links.resolvedType = errorType;
        }
      }
    }
    return links.resolvedType;
  }
  function resolveImportSymbolType(node, links, symbol, meaning) {
    const resolvedSymbol = resolveSymbol(symbol);
    links.resolvedSymbol = resolvedSymbol;
    if (meaning === 111551 /* Value */) {
      return getInstantiationExpressionType(getTypeOfSymbol(symbol), node);
    } else {
      return getTypeReferenceType(node, resolvedSymbol);
    }
  }
  function getTypeFromTypeLiteralOrFunctionOrConstructorTypeNode(node) {
    const links = getNodeLinks(node);
    if (!links.resolvedType) {
      const aliasSymbol = getAliasSymbolForTypeNode(node);
      if (getMembersOfSymbol(node.symbol).size === 0 && !aliasSymbol) {
        links.resolvedType = emptyTypeLiteralType;
      } else {
        let type = createObjectType(16 /* Anonymous */, node.symbol);
        type.aliasSymbol = aliasSymbol;
        type.aliasTypeArguments = getTypeArgumentsForAliasSymbol(aliasSymbol);
        if (isJSDocTypeLiteral(node) && node.isArrayType) {
          type = createArrayType(type);
        }
        links.resolvedType = type;
      }
    }
    return links.resolvedType;
  }
  function getAliasSymbolForTypeNode(node) {
    let host2 = node.parent;
    while (isParenthesizedTypeNode(host2) || isJSDocTypeExpression(host2) || isTypeOperatorNode(host2) && host2.operator === 148 /* ReadonlyKeyword */) {
      host2 = host2.parent;
    }
    return isTypeAlias(host2) ? getSymbolOfDeclaration(host2) : void 0;
  }
  function getTypeArgumentsForAliasSymbol(symbol) {
    return 