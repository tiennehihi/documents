"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Generated by CoffeeScript 2.5.1
var Block, SpecialString, cloneAndMergeDeep, terminalWidth;
SpecialString = require('./SpecialString');
terminalWidth = require('../tools').getCols();

var _require = require('../tools');

cloneAndMergeDeep = _require.cloneAndMergeDeep;

module.exports = Block = function () {
  var self;

  var Block = /*#__PURE__*/function () {
    function Block(_layout, _parent) {
      var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      var _name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

      _classCallCheck(this, Block);

      this._layout = _layout;
      this._parent = _parent;
      this._name = _name;
      this._config = cloneAndMergeDeep(self.defaultConfig, config);
      this._closed = false;
      this._wasOpenOnce = false;
      this._active = false;
      this._buffer = '';
      this._didSeparateBlock = false;
      this._linePrependor = new this._config.linePrependor.fn(this._config.linePrependor.options);
      this._lineAppendor = new this._config.lineAppendor.fn(this._config.lineAppendor.options);
      this._blockPrependor = new this._config.blockPrependor.fn(this._config.blockPrependor.options);
      this._blockAppendor = new this._config.blockAppendor.fn(this._config.blockAppendor.options);
    }

    _createClass(Block, [{
      key: "_activate",
      value: function _activate() {
        var deactivateParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        if (this._active) {
          throw Error("This block is already active. This is probably a bug in RenderKid itself");
        }

        if (this._closed) {
          throw Error("This block is closed and cannot be activated. This is probably a bug in RenderKid itself");
        }

        this._active = true;
        this._layout._activeBlock = this;

        if (deactivateParent) {
          if (this._parent != null) {
            this._parent._deactivate(false);
          }
        }

        return this;
      }
    }, {
      key: "_deactivate",
      value: function _deactivate() {
        var activateParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        this._ensureActive();

        this._flushBuffer();

        if (activateParent) {
          if (this._parent != null) {
            this._parent._activate(false);
          }
        }

        this._active = false;
        return this;
      }
    }, {
      key: "_ensureActive",
      value: function _ensureActive() {
        if (!this._wasOpenOnce) {
          throw Error("This block has never been open before. This is probably a bug in RenderKid itself.");
        }

        if (!this._active) {
          throw Error("This block is not active. This is probably a bug in RenderKid itself.");
        }

        if (this._closed) {
          throw Error("This block is already closed. This is probably a bug in RenderKid itself.");
        }
      }
    }, {
      key: "_open",
      value: function _open() {
        if (this._wasOpenOnce) {
          throw Error("Block._open() has been called twice. This is probably a RenderKid bug.");
        }

        this._wasOpenOnce = true;

        if (this._parent != null) {
          this._parent.write(this._whatToPrependToBlock());
        }

        this._activate();

        return this;
      }
    }, {
      key: "close",
      value: function close() {
        this._deactivate();

        this._closed = true;

        if (this._parent != null) {
          this._parent.write(this._whatToAppendToBlock());
        }

        return this;
      }
    }, {
      key: "isOpen",
      value: function isOpen() {
        return this._wasOpenOnce && !this._closed;
      }
    }, {
      key: "write",
      value: function write(str) {
        this._ensureActive();

        if (str === '') {
          return;
        }

        str = String(str);
        this._buffer += str;
        return this;
      }
    }, {
      key: "openBlock",
      value: function openBlock(config, name) {
        var block;

        this._ensureActive();

        block = new Block(this._layout, this, config, name);

        block._open();

        return block;
      }
    }, {
      key: "_flushBuffer",
      value: function _flushBuffer() {
        var str;

        if (this._buffer === '') {
          return;
        }

        str = this._buffer;
        this._buffer = '';

        this._writeInline(str);
      }
    }, {
      key: "_toPrependToLine",
      value: function _toPrependToLine() {
        var fromParent;
        fromParent = '';

        if (this._parent != null) {
          fromParent = this._parent._toPrependToLine();
        }

        return this._linePrependor.render(fromParent);
      }
    }, {
      key: "_toAppendToLine",
      value: function _toAppendToLine() {
        var fromParent;
        fromParent = '';

        if (this._parent != null) {
          fromParent = this._parent._toAppendToLine();
        }

        return this._lineAppendor.render(fromParent);
      }
    }, {
      key: "_whatToPrependToBlock",
      value: function _whatToPrependToBlo