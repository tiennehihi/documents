ype(target);
    for (const targetProp of properties) {
      if (isStaticPrivateIdentifierProperty(targetProp)) {
        continue;
      }
      if (requireOptionalProperties || !(targetProp.flags & 16777216 /* Optional */ || getCheckFlags(targetProp) & 48 /* Partial */)) {
        const sourceProp = getPropertyOfType(source, targetProp.escapedName);
        if (!sourceProp) {
          yield targetProp;
        } else if (matchDiscriminantProperties) {
          const targetType = getTypeOfSymbol(targetProp);
          if (targetType.flags & 109472 /* Unit */) {
            const sourceType = getTypeOfSymbol(sourceProp);
            if (!(sourceType.flags & 1 /* Any */ || getRegularTypeOfLiteralType(sourceType) === getRegularTypeOfLiteralType(targetType))) {
              yield targetProp;
            }
          }
        }
      }
    }
  }
  function getUnmatchedProperty(source, target, requireOptionalProperties, matchDiscriminantProperties) {
    return firstOrUndefinedIterator(getUnmatchedProperties(source, target, requireOptionalProperties, matchDiscriminantProperties));
  }
  function tupleTypesDefinitelyUnrelated(source, target) {
    return !(target.target.combinedFlags & 8 /* Variadic */) && target.target.minLength > source.target.minLength || !target.target.hasRestElement && (source.target.hasRestElement || target.target.fixedLength < source.target.fixedLength);
  }
  function typesDefinitelyUnrelated(source, target) {
    return isTupleType(source) && isTupleType(target) ? tupleTypesDefinitelyUnrelated(source, target) : !!getUnmatchedProperty(
      source,
      target,
      /*requireOptionalProperties*/
      false,
      /*matchDiscriminantProperties*/
      true
    ) && !!getUnmatchedProperty(
      target,
      source,
      /*requireOptionalProperties*/
      false,
      /*matchDiscriminantProperties*/
      false
    );
  }
  function getTypeFromInference(inference) {
    return inference.candidates ? getUnionType(inference.candidates, 2 /* Subtype */) : inference.contraCandidates ? getIntersectionType(inference.contraCandidates) : void 0;
  }
  function hasSkipDirectInferenceFlag(node) {
    return !!getNodeLinks(node).skipDirectInference;
  }
  function isFromInferenceBlockedSource(type) {
    return !!(type.symbol && some(type.symbol.declarations, hasSkipDirectInferenceFlag));
  }
  function templateLiteralTypesDefinitelyUnrelated(source, target) {
    const sourceStart = source.texts[0];
    const targetStart = target.texts[0];
    const sourceEnd = source.texts[source.texts.length - 1];
    const targetEnd = target.texts[target.texts.length - 1];
    const startLen = Math.min(sourceStart.length, targetStart.length);
    const endLen = Math.min(sourceEnd.length, targetEnd.length);
    return sourceStart.slice(0, startLen) !== targetStart.slice(0, startLen) || sourceEnd.slice(sourceEnd.length - endLen) !== targetEnd.slice(targetEnd.length - endLen);
  }
  function isValidNumberString(s, roundTripOnly) {
    if (s === "")
      return false;
    const n = +s;
    return isFinite(n) && (!roundTripOnly || "" + n === s);
  }
  function parseBigIntLiteralType(text) {
    return getBigIntLiteralType(parseValidBigInt(text));
  }
  function isMemberOfStringMapping(source, target) {
    if (target.flags & 1 /* Any */) {
      return true;
    }
    if (target.flags & (4 /* String */ | 134217728 /* TemplateLiteral */)) {
      return isTypeAssignableTo(source, target);
    }
    if (target.flags & 268435456 /* StringMapping */) {
      const mappingStack = [];
      while (target.flags & 268435456 /* StringMapping */) {
        mappingStack.unshift(target.symbol);
        target = target.type;
      }
      const mappedSource = reduceLeft(mappingStack, (memo, value)