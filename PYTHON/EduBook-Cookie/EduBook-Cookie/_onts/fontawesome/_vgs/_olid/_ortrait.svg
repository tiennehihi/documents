is.visitChildren(node, ['typeParameters']);
        this.visitType(node.typeParameters);
    }
    PrivateIdentifier() {
        // private identifiers are members on classes and thus have no variables to to reference
    }
    Program(node) {
        const globalScope = this.scopeManager.nestGlobalScope(node);
        this.populateGlobalsFromLib(globalScope);
        if (this.scopeManager.isGlobalReturn()) {
            // For