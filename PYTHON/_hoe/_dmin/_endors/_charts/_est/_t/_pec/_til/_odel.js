lesRegex.test(resolvedFilename))return!1;if(matcher&&"function"==typeof matcher)return!!matcher(resolvedFilename);return!0}(filename,exts,matcher,ignoreNodeModules)&&(compile=mod._compile,mod._compile=function(code){mod._compile=compile;const newCode=hook(code,filename);if("string"!=typeof newCode)throw new Error(HOOK_RETURNED_NOTHING_ERROR_MESSAGE);return mod._compile(newCode,filename)}),oldLoader(mod,filename)}})),function(){reverted||(reverted=!0,exts.forEach((ext=>{Module._extensions[ext]===loaders[ext]&&(oldLoaders[ext]?Module._extensions[ext]=oldLoaders[ext]:delete Module._extensions[ext])})))}};var _module=_interopRequireDefault(__webpack_require__("module")),_path=_interopRequireDefault(__webpack_require__("path"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const nodeModulesRegex=/^(?:.*[\\/])?node_modules(?:[\\/].*)?$/,Module=module.constructor.length>1?module.constructor:_module.default,HOOK_RETURNED_NOTHING_ERROR_MESSAGE="[Pirates] A hook returned a non-string, or nothing at all! This is a violation of intergalactic law!\n--------------------\nIf you have no idea what this means or what Pirates is, let me explain: Pirates is a module that makes is easy to implement require hooks. One of the require hooks you're using uses it. One of these require hooks didn't return anything from it's handler, so we don't know what to do. You might want to debug this."},"./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/comparator.js":(module,__unused_webpack_exports,__webpack_require__)=>{const ANY=Symbol("SemVer ANY");class Comparator{static get ANY(){return ANY}constructor(comp,options){if(options=parseOptions(options),comp instanceof Comparator){if(comp.loose===!!options.loose)return comp;comp=comp.value}comp=comp.trim().split(/\s+/).join(" "),debug("comparator",comp,options),this.options=options,this.loose=!!options.loose,this.parse(comp),this.semver===ANY?this.value="":this.value=this.operator+this.semver.version,debug("comp",this)}parse(comp){const r=this.options.loose?re[t.COMPARATORLOOSE]:re[t.COMPARATOR],m=comp.match(r);if(!m)throw new TypeError(`Invalid comparator: ${comp}`);this.operator=void 0!==m[1]?m[1]:"","="===this.operator&&(this.operator=""),m[2]?this.semver=new SemVer(m[2],this.options.loose):this.semver=ANY}toString(){return this.value}test(version){if(debug("Comparator.test",version,this.options.loose),this.semver===ANY||version===ANY)return!0;if("string"==typeof version)try{version=new SemVer(version,this.options)}catch(er){return!1}return cmp(version,this.operator,this.semver,this.options)}intersects(comp,options){if(!(comp instanceof Comparator))throw new TypeError("a Comparator is required");return""===this.operator?""===this.value||new Range(comp.value,options).test(this.value):""===comp.operator?""===comp.value||new Range(this.value,options).test(comp.semver):(!(options=parseOptions(options)).includePrerelease||"<0.0.0-0"!==this.value&&"<0.0.0-0"!==comp.value)&&(!(!options.includePrerelease&&(this.value.startsWith("<0.0.0")||comp.value.startsWith("<0.0.0")))&&(!(!this.operator.startsWith(">")||!comp.operator.startsWith(">"))||(!(!this.operator.startsWith("<")||!comp.operator.startsWith("<"))||(!(this.semver.version!==comp.semver.version||!this.operator.includes("=")||!comp.oper