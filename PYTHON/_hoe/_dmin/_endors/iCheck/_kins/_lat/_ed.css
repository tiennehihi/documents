'use strict';

var Promise = require('./core');

var DEFAULT_WHITELIST = [
  ReferenceError,
  TypeError,
  RangeError
];

var enabled = false;
exports.disable = disable;
function disable() {
  enabled = false;
  Promise._B = null;
  Promise._C = null;
}

exports.enable = enable;
function enable(options) {
  options = options || {};
  if (enabled) disable();
  enabled = true;
  var id = 0;
  var displayId = 0;
  var rejections = {};
  Promise._B = function (promise) {
    if (
      promise._y === 2 && // IS REJECTED
      rejections[promise._E]
    ) {
      if (rejections[promise._E].logged) {
        onHandled(promise._E);
      } else {
        clearTimeout(rejections[promise._E].timeout);
      }
      delete rejections[promise._E];
    }
  };
  Promise._C = function (promise, err) {
    if (promise._x === 0) { // not yet handled
      promise._E = id++;
      rejections[promise._E] = {
        displayId: null,
        error: err,
        timeout: setTimeout(
          onUnhandled.bind(null, promise._E),
          // For reference errors and type errors, this almost always
          // means the programmer made a mistake, so log them after just
          // 100ms
          // otherwise, wait 2 seconds to see if they get handled
          matchWhitelist(err, DEFA