s:`${alias}$${index}`,ownPass:!!ownPass}))));return function(items){const map=new Map;for(const item of items){if("function"!=typeof item.value)continue;let nameMap=map.get(item.value);if(nameMap||(nameMap=new Set,map.set(item.value,nameMap)),nameMap.has(item.name)){const conflicts=items.filter((i=>i.value===item.value));throw new Error(["Duplicate plugin/preset detected.","If you'd like to use two separate instances of a plugin,","they need separate names, e.g.","","  plugins: [","    ['some-plugin', {}],","    ['some-plugin', {}, 'some unique name'],","  ]","","Duplicates detected are:",`${JSON.stringify(conflicts,null,2)}`].join("\n"))}nameMap.add(item.name)}}(descriptors),descriptors}function*createDescriptor(pair,dirname,{type,alias,ownPass}){const desc=(0,_item.getItemDescriptor)(pair);if(desc)return desc;let name,options,file,value=pair;Array.isArray(value)&&(3===value.length?[value,options,name]=value:[value,options]=value);let filepath=null;if("string"==typeof value){if("string"!=typeof type)throw new Error("To resolve a string-based item, the type of item must be given");const resolver="plugin"===type?_index.loadPlugin:_index.loadPreset,request=value;({filepath,value}=yield*resolver(value,dirname)),file={request,resolved:filepath}}if(!value)throw new Error(`Unexpected falsy value: ${String(value)}`);if("object"==typeof value&&value.__esModule){if(!value.default)throw new Error("Must export a default export when using ES6 modules.");value=value.default}if("object"!=typeof value&&"function"!=typeof value)throw new Error(`Unsupported format: ${typeof value}. Expected an object or a function.`);if(null!==filepath&&"object"==typeof value&&value)throw new Error(`Plugin/Preset files are not allowed to export objects, only functions. In ${filepath}`);return{name,alias:filepath||alias,value,options,dirname,ownPass,file}}},"./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files/configuration.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";function _debug(){const data=__webpack_require__("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js");return _debug=function(){return data},data}function _fs(){const data=__webpack_require__("fs");return _fs=function(){return data},data}function _path(){const data=__webpack_require__("path");return _path=function(){return data},data}function _json(){const data=__webpack_require__("./node_modules/.pnpm/json5@2.2.3/node_modules/json5/dist/index.mjs");return _json=function(){return data},data}function _gensync(){const data=__webpack_require__("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");return _gensync=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.ROOT_CONFIG_FILENAMES=void 0,exports.findConfigUpwards=function(rootDir){let dirname=rootDir;for(;;){for(const filename of ROOT_CONFIG_FILENAMES)if(_fs().existsSync(_path().join(dirname,filename)))return dirname;const nextDir=_path().dirname(dirname);if(dirname===nextDir)break;dirname=nextDir}return null},exports.findRelativeConfig=function*(packageData,envName,caller){let config=null,ignore=null;const dirname=_path().dirname(packageData.filepath);for(const loc of packageData.directories){var _packageData$pkg;if(!config)config=yield*loadOneConfig(RELATIVE_CONFIG_FILENAMES,loc,envName,caller,(null==(_packageData$pkg=packageData.pkg)?void 0:_packageData$pkg.dirname)===loc?packageToBabelConfig(packageData.pkg):null);if(!ignore){const ignoreLoc=_path().join(loc,BABELIGNORE_FILENAME);ignore=yield*readIgnoreConfig(ignoreLoc),ignore&&debug("Found ignore %o from %o.",ignore.filepath,dirname)}}return{config,ignore}},exports.findRootConfig=function(dirname,envName,caller){return loadOneConfig(ROOT_CONFIG_FILENAMES,dirname,envName,caller)},exports.loadConfig=function*(name,dirname,envName,caller){const filepath=(v=process.versions.node,w="8.9",v=v.split("."),w=w.split("."),+v[0]>+w[0]||v[0]==w[0]&&+v[1]>=+w[1]?__webpack_require__("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files sync recursive").resolve:(r,{paths:[b]},M=__webpack_require__("module"))=>{let f=M._findPath(r,M._nodeModulePaths(b).concat(b));if(f)return f;throw f=new Error(`Cannot resolve module '${r}'`),f.code="MODULE_NOT_FOUND",f})(name,{paths:[dirname]}),conf=yield*readConfig(filepath,envName,caller);var v,w;if(!conf)throw new _configError.default("Config file contains no configuration data",filepath);return debug("Loaded config %o from %o.",name,dirname),conf},exports.resolveShowConfigPath=function*(dirname){const targetPath=process.env.BABEL_SHOW_CONFIG_FOR;if(null!=targetPath){const absolutePath=_path().resolve(dirname,targetPath);if(!(yield*fs.stat(absolutePath)).isFile())throw new Error(`${absolutePath}: BABEL_SHOW_CONFIG_FOR must refer to a regular file, directories are not supported.`);return absolutePath}return null};var _caching=__webpack_require__("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/caching.js"),_configApi=__webpack_require__("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/helpers/config-api.js"),_utils=__webpack_require__("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files/utils.js"),_moduleTypes=__webpack_require__("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files/module-types.js"),_patternToRegex=__webpack_require__("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/pattern-to-regex.js"),_configError=__webpack_require__("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/errors/config-error.js"),fs=__webpack_require__("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/gensync-utils/fs.js"),_rewriteStackTrace=__webpack_require__("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");const debug=_debug()("babel:config:loading:files:configuration"),ROOT_CONFIG_FILENAMES=["babel.config.js","babel.config.cjs","babel.config.mjs","babel.config.json","babel.config.cts"];exports.ROOT_CONFIG_FILENAMES=ROOT_CONFIG_FILENAMES;const RELATIVE_CONFIG_FILENAMES=[".babelrc",".babelrc.js",".babelrc.cjs",".babelrc.mjs",".babelrc.json",".babelrc.cts"],BABELIGNORE_FILENAME=".babelignore"