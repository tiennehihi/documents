;\nimport MemberExpression from './MemberExpression';\nimport type * as NodeType from './NodeType';\nimport { NodeBase } from './shared/Node';\n\nconst ASSET_PREFIX = 'ROLLUP_ASSET_URL_';\nconst CHUNK_PREFIX = 'ROLLUP_CHUNK_URL_';\nconst FILE_PREFIX = 'ROLLUP_FILE_URL_';\n\nexport default class MetaProperty extends NodeBase {\n\tdeclare meta: Identifier;\n\tdeclare property: Identifier;\n\tdeclare type: NodeType.tMetaProperty;\n\n\tprivate declare metaProperty?: string | null;\n\n\taddAccessedGlobals(\n\t\tformat: InternalModuleFormat,\n\t\taccessedGlobalsByScope: Map<ChildScope, Set<string>>\n\t): void {\n\t\tconst metaProperty = this.metaProperty;\n\t\tconst accessedGlobals = (\n\t\t\tmetaProperty &&\n\t\t\t(metaProperty.startsWith(FILE_PREFIX) ||\n\t\t\t\tmetaProperty.startsWith(ASSET_PREFIX) ||\n\t\t\t\tmetaProperty.startsWith(CHUNK_PREFIX))\n\t\t\t\t? accessedFileUrlGlobals\n\t\t\t\t: accessedMetaUrlGlobals\n\t\t)[format];\n\t\tif (accessedGlobals.length > 0) {\n\t\t\tthis.scope.addAccessedGlobals(accessedGlobals, accessedGlobalsByScope);\n\t\t}\n\t}\n\n\tgetReferencedFileName(outputPluginDriver: PluginDriver): string | null {\n\t\tconst metaProperty = this.metaProperty as string | null;\n\t\tif (metaProperty && metaProperty.startsWith(FILE_PREFIX)) {\n\t\t\treturn outputPluginDriver.getFileName(metaProperty.substring(FILE_PREFIX.length));\n\t\t}\n\t\treturn null;\n\t}\n\n\thasEffects(): boolean {\n\t\treturn false;\n\t}\n\n\thasEffectsOnInteractionAtPath(path: ObjectPath, { type }: NodeInteraction): boolean {\n\t\treturn path.length > 1 || type !== INTERACTION_ACCESSED;\n\t}\n\n\tinclude(): void {\n\t\tif (!this.included) {\n\t\t\tthis.included = true;\n\t\t\tif (this.meta.name === 'import') {\n\t\t\t\tthis.context.addImportMeta(this);\n\t\t\t\tconst parent = this.parent;\n\t\t\t\tthis.metaProperty =\n\t\t\t\t\tparent instanceof MemberExpression && typeof parent.propertyKey === 'string'\n\t\t\t\t\t\t? parent.propertyKey\n\t\t\t\t\t\t: null;\n\t\t\t}\n\t\t}\n\t}\n\n\trenderFinalMechanism(\n\t\tcode: MagicString,\n\t\tchunkId: string,\n\t\tformat: InternalModuleFormat,\n\t\tsnippets: GenerateCodeSnippets,\n\t\toutputPluginDriver: PluginDriver\n\t): void {\n\t\tconst parent = this.parent;\n\t\tconst metaProperty = this.metaProperty as string | null;\n\n\t\tif (\n\t\t\tmetaProperty &&\n\t\t\t(metaProperty.startsWith(FILE_PREFIX) ||\n\t\t\t\tmetaProperty.startsWith(ASSET_PREFIX) ||\n\t\t\t\tmetaProperty.startsWith(CHUNK_PREFIX))\n\t\t) {\n\t\t\tlet referenceId: string | null = null;\n\t\t\tlet assetReferenceId: string | null = null;\n\t\t\tlet chunkReferenceId: string | null = null;\n\t\t\tlet fileName: string;\n\t\t\tif (metaProperty.startsWith(FILE_PREFIX)) {\n\t\t\t\treferenceId = metaProperty.substring(FILE_PREFIX.length);\n\t\t\t\tfileName = outputPluginDriver.getFileName(referenceId);\n\t\t\t} else if (metaProperty.startsWith(ASSET_PREFIX)) {\n\t\t\t\twarnDeprecation(\n\t\t\t\t\t`Using the \"${ASSET_PREFIX}\" prefix to reference files is deprecated. Use the \"${FILE_PREFIX}\" prefix instead.`,\n\t\t\t\t\ttrue,\n\t\t\t\t\tthis.context.options\n\t\t\t\t);\n\t\t\t\tassetReferenceId = metaProperty.substring(ASSET_PREFIX.length);\n\t\t\t\tfileName = outputPluginDriver.getFileName(assetReferenceId);\n\t\t\t} else {\n\t\t\t\twarnDeprecation(\n\t\t\t\t\t`Using the \"${CHUNK_PREFIX}\" prefix to reference files is deprecated. Use the \"${FILE_PREFIX}\" prefix instead.`,\n\t\t\t\t\ttrue,\n\t\t\t\t\tthis.context.options\n\t\t\t\t);\n\t\t\t\tchunkReferenceId = metaProperty.substring(CHUNK_PREFIX.length);\n\t\t\t\tfileName = outputPluginDriver.getFileName(chunkReferenceId);\n\t\t\t}\n\t\t\tconst relativePath = normalize(relative(dirname(chunkId), fileName));\n\t\t\tlet replacement;\n\t\t\tif (assetReferenceId !== null) {\n\t\t\t\treplacement = outputPluginDriver.hookFirstSync('resolveAssetUrl', [\n\t\t\t\t\t{\n\t\t\t\t\t\tassetFileName: fileName,\n\t\t\t\t\t\tchunkId,\n\t\t\t\t\t\tformat,\n\t\t\t\t\t\tmoduleId: this.context.module.id,\n\t\t\t\t\t\trelativeAssetPath: relativePath\n\t\t\t\t\t}\n\t\t\t\t]);\n\t\t\t}\n\t\t\tif (!replacement) {\n\t\t\t\treplacement =\n\t\t\t\t\toutputPluginDriver.hookFirstSync('resolveFileUrl', [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tassetReferenceId,\n\t\t\t\t\t\t\tchunkId,\n\t\t\t\t\t\t\tchunkReferenceId,\n\t\t\t\t\t\t\tfileName,\n\t\t\t\t\t\t\tformat,\n\t\t\t\t\t\t\tmoduleId: this.context.module.id,\n\t\t\t\t\t\t\treferenceId: referenceId || assetReferenceId || chunkReferenceId!,\n\t\t\t\t\t\t\trelativePath\n\t\t\t\t\t\t}\n\t\t\t\t\t]) || relativeUrlMechanisms[format](relativePath);\n\t\t\t}\n\n\t\t\tcode.overwrite(\n\t\t\t\t(parent as MemberExpression).start,\n\t\t\t\t(parent as MemberExpression).end,\n\t\t\t\treplacement,\n\t\t\t\t{ contentOnly: true }\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst replacement =\n\t\t\toutputPluginDriver.hookFirstSync('resolveImportMeta', [\n\t\t\t\tmetaProperty,\n\t\t\t\t{\n\t\t\t\t\tchunkId,\n\t\t\t\t\tformat,\n\t\t\t\t\tmoduleId: this.context.module.id\n\t\t\t\t}\n\t\t\t]) || importMetaMechanisms[format]?.(metaProperty, { chunkId, snippets });\n\t\tif (typeof replacement === 'string') {\n\t\t\tif (parent instanceof MemberExpression) {\n\t\t\t\tcode.overwrite(parent.start, parent.end, replacement, { contentOnly: true });\n\t\t\t} else {\n\t\t\t\tcode.overwrite(this.start, this.end, replacement, { contentOnly: true });\n\t\t\t}\n\t\t}\n\t}\n}\n\nconst accessedMetaUrlGlobals = {\n\tamd: ['document', 'module', 'URL'],\n\tcjs: ['document', 'require', 'URL'],\n\tes: [],\n\tiife: ['document', 'URL'],\n\tsystem: ['module'],\n\tumd: ['document', 'require', 'URL']\n};\n\nconst accessedFileUrlGlobals = {\n\tamd: ['document', 'require', 'URL'],\n\tcjs: ['document', 'require', 'URL'],\n\tes: [],\n\tiife: ['document', 'URL'],\n\tsystem: ['module', 'URL'],\n\tumd: ['document', 'require', 'URL']\n};\n\nconst getResolveUrl = (path: string, URL = 'URL') => `new ${URL}(${path}).href`;\n\nconst getRelativeUrlFromDocument = (relativePath: string, umd = false) =>\n\tgetResolveUrl(\n\t\t`'${relativePath}', ${\n\t\t\tumd ? `typeof document === 'undefined' ? location.href : ` : ''\n\t\t}document.currentScript && document.currentScript.src || document.baseURI`\n\t);\n\nconst getGenericImportMetaMechanism =\n\t(getUrl: (chunkId: string) => string) =>\n\t(prop: string | null, { chunkId }: { chunkId: string }) => {\n\t\tconst urlMechanism = getUrl(chunkId);\n\t\treturn prop === null\n\t\t\t? `({ url: ${urlMechanism} })`\n\t\t\t: prop === 'url'\n\t\t\t? urlMechanism\n\t\t\t: 'undefined';\n\t};\n\nconst getUrlFromDocument = (chunkId: string, umd = false) =>\n\t`${\n\t\tumd ? `typeof document === 'undefined' ? location.href : ` : ''\n\t}(document.currentScript && document.currentScript.src || new URL('${chunkId}', document.baseURI).href)`;\n\nconst relativeUrlMechanisms: Record<InternalModuleFormat, (relativePath: string) => string> = {\n\tamd: relativePath => {\n\t\tif (relativePath[0] !== '.') relativePath = './' + relativePath;\n\t\treturn getResolveUrl(`require.toUrl('${relativePath}'), document.baseURI`);\n\t},\n\tcjs: relativePath =>\n\t\t`(typeof document === 'undefined' ? ${getResolveUrl(\n\t\t\t`'file:' + __dirname + '/${relativePath}'`,\n\t\t\t`(require('u' + 'rl').URL)`\n\t\t)} : ${getRelativeUrlFromDocument(relativePath)})`,\n\tes: relativePath => getResolveUrl(`'${relativePath}', import.meta.url`),\n\tiife: relativePath => getRelativeUrlFromDocument(relativePath),\n\tsystem: relativePath => getResolveUrl(`'${relativePath}', module.meta.url`),\n\tumd: relativePath =>\n\t\t`(typeof document === 'undefined' && typeof location === 'undefined' ? ${getResolveUrl(\n\t\t\t`'file:' + __dirname + '/${relativePath}'`,\n\t\t\t`(require('u' + 'rl').URL)`\n\t\t)} : ${getRelativeUrlFromDocument(relativePath, true)})`\n};\n\nconst importMetaMechanisms: Record<\n\tstring,\n\t(prop: string | null, options: { chunkId: string; snippets: GenerateCodeSnippets }) => string\n> = {\n\tamd: getGenericImportMetaMechanism(() => getResolveUrl(`module.uri, document.baseURI`)),\n\tcjs: getGenericImportMetaMechanism(\n\t\tchunkId =>\n\t\t\t`(typeof document === 'undefined' ? ${getResolveUrl(\n\t\t\t\t`'file:' + __filename`,\n\t\t\t\t`(require('u' + 'rl').URL)`\n\t\t\t)} : ${getUrlFromDocument(chunkId)})`\n\t),\n\tiife: getGenericImportMetaMechanism(chunkId => getUrlFromDocument(chunkId)),\n\tsystem: (prop, { snippets: { getPropertyAccess } }) =>\n\t\tprop === null ? `module.meta` : `module.meta${getPropertyAccess(prop)}`,\n\tumd: getGenericImportMetaMechanism(\n\t\tchunkId =>\n\t\t\t`(typeof document === 'undefined' && typeof location === 'undefined' ? ${getResolveUrl(\n\t\t\t\t`'file:' + __filename`,\n\t\t\t\t`(require('u' + 'rl').URL)`\n\t\t\t)} : ${getUrlFromDocument(chunkId, true)})`\n\t)\n};\n","import type MagicString from 'magic-string';\nimport { type RenderOptions, renderStatementList } from '../../utils/renderHelpers';\nimport type { HasEffectsContext, InclusionContext } from '../ExecutionContext';\nimport type * as NodeType from './NodeType';\nimport { type IncludeChildren, NodeBase, type StatementNode } from './shared/Node';\n\nexport defau