t=>t.then((([t,i])=>this.fetchResolvedDependency(t,e.id,i)))))))e.dependencies.add(i),i.importers.push(e.id);if(!this.options.treeshake||"no-treeshake"===e.info.moduleSideEffects)for(const t of e.dependencies)t instanceof ln&&(t.importedFromNotTreeshaken=!0)}getNormalizedResolvedIdWithoutDefaults(e,t,i){const{makeAbsoluteExternalsRelative:s}=this.options;if(e){if("object"==typeof e){const n=e.external||this.options.external(e.id,t,!0);return{...e,external:n&&("relative"===n||!k(e.id)||!0===n&&Jo(e.id,i,s)||"absolute")}}const n=this.options.external(e,t,!0);return{external:n&&(Jo(e,i,s)||"absolute"),id:n&&s?Yo(e,t):e}}const n=s?Yo(i,t):i;return!1===e||this.options.external(n,t,!0)?{external:Jo(n,i,s)||"absolute",id:n}:null}getResolveDynamicImportPromises(e){return e.dynamicImports.map((async t=>{const i=await this.resolveDynamicImport(e,"string"==typeof t.argument?t.argument:t.argument.esTreeNode,e.id);return i&&"object"==typeof i&&(t.id=i.id),[t,i]}))}getResolveStaticDependencyPromises(e){return Array.from(e.sources,(async t=>[t,e.resolvedIds[t]=e.resolvedIds[t]||this.handleResolveId(await this.resolveId(t,e.id,se,!1),t,e.id)]))}getResolvedIdWithDefaults(e){var t,i;if(!e)return null;const s=e.external||!1;return{external:s,id:e.id,meta:e.meta||{},moduleSideEffects:null!==(t=e.moduleSideEffects)&&void 0!==t?t:this.hasModuleSideEffects(e.id,!!s),syntheticNamedExports:null!==(i=e.syntheticNamedExports)&&void 0!==i&&i}}async handleExistingModule(e,t,i){const s=this.moduleLoadPromises.get(e);if(i)return"resolveDependencies"===i?Zo(s):s;if(t){e.info.isEntry=!0,this.implicitEntryModules.delete(e);for(const t of e.implicitlyLoadedAfter)t.implicitlyLoadedBefore.delete(e);e.implicitlyLoadedAfter.clear()}return this.fetchModuleDependencies(e,...await s)}handleResolveId(e,t,i){return null===e?w(t)?pe(function(e,t){return{code:me.UNRESOLVED_IMPORT,message:`Could not resolve '${e}' from ${he(t)}`}}(t,i)):(this.options.onwarn(function(e,t){return{code:me.UNRESOLVED_IMPORT,importer:he(t),message:`'${e}' is imported by ${he(t)}, but could not be resolved â€“ treating it as an external dependency`,source:e,url:"https://rollupjs.org/guide/en/#warning-treating-module-as-external-dependency"}}(t,i)),{external:!0,id:t,meta:{},moduleSideEffects:this.hasModuleSideEffects(t,!0),syntheticNamedExports:!1}):(e.external&&e.syntheticNamedExports&&this.options.onwarn(function(e,t){return{code:me.EXTERNAL_SYNTHETIC_EXPORTS,importer:he(t),message:`External '${e}' can not have 'syntheticNamedExports' enabled.`,source:e}}(t,i)),e)}async loadEntryModule(e,t,i,s){const n=await Uo(e,i,this.options.preserveSymlinks,this.pluginDriver,this.resolveId,null,se,!0);return null==n?pe(null===s?function(e){return{code:me.UNRESOLVED_ENTRY,message:`Could not resolve entry module (${he(e)}).`}}(e):function(e,t){return{code:me.MISSING_IMPLICIT_DEPENDANT,message:`Module "${he(e)}" that should be implicitly loaded before "${he(t)}" could not be resolved.`}}(e,s)):!1===n||"object"==typeof n&&n.external?pe(null===s?function(e){return{code:me.UNRESOLVED_ENTRY,message:`Entry module cannot be external (${he(e)}).`}}(e):function(e,t){return{code:me.MISSING_IMPLICIT_DEPENDANT,message:`Module "${he(e)}" that should be implicitly loaded before "${he(t)}" cannot be external.`}}(e,s)):this.fetchModule(this.getResolvedIdWithDefaults("object"==typeof n?n:{id:n}),void 0,t,!1)}async resolveDynamicImport(e,t,i){var s,n;const r=await this.pluginDriver.hookFirst("resolveDynamicImport",[t,i]);return"string"!=typeof t?"string"==typeof r?r:r?{external:!1,moduleSideEffects:!0,...r}:null:null==r?null!==(s=(n=e.resolvedIds)[t])&&void 0!==s?s:n[t]=this.handleResolveId(await this.resolveId(t,e.id,se,!1),t,e.id):this.handleResolveId(this.getResolvedIdWithDefaults(this.getNormalizedResolvedIdWithoutDefaults(r,i,t)),t,i)}}function Yo(e,t){return w(e)?t?O(t,"..",e):O(e):e}function Qo(e,{fileName:t,name:i},s,n){var r;if(null!==t)e.chunkFileNames.add(t);else if(null!==i){let t=0;for(;(null===(r=e.chunkNames[t])||void 0===r?void 0:r.priority)<n;)t++;e.chunkNames.splice(t,0,{isUserDefined:s,name:i,priority:n})}}function Jo(e,t,i){return!0===i||"ifRelativeSource"===i&&w(t)||!k(e)}async function Zo(e){const[t,i]=await e;return Promise.all([...t,...i])}class el extends Bt{constructor(){super(),this.parent=null,this.variables.set("undefined",new Rs)}findVariable(e){let t=this.variables.get(e);return t||(t=new ii(e),this.variables.set(e,t)),t}}function tl(e,t,i){const s=e.toLowerCase();t[Rr].has(s)?i(function(e){return{code:me.FILE_NAME_CONFLICT,message:`The emitted file "${e}" overwrites a previously emitted file of the same name.`}}(e)):t[e]=Mr}function il(e,t,i){if(!("string"==typeof e||e instanceof Uint8Array)){const e=t.fileName||t.name||i;return pe(Ae(`Could not set source for ${"string"==typeof e?`asset "${e}"`:"unnamed asset"}, asset source needs to be a string, Uint8Array or Buffer.`))}return e}function sl(e,t){return"string"!=typeof e.fileName?pe((i=e.name||t,{code:me.ASSET_NOT_FINALISED,message:`Plugin error - Unable to get file name for asset "${i}". Ensure that the source is set and that generate is called first.`})):e.fileName;var i}function nl(e,t){var i;const s=e.fileName||e.module&&(null===(i=null==t?void 0:t.get(e.module))||void 0===i?void 0:i.id);return s||pe((n=e.fileName||e.name,{code:me.CHUNK_NOT_GENERATED,message:`Plugin error - Unable to get file name for chunk "${n}". Ensure that generate is called first.`}));var n}class rl{constructor(e,t,i){this.graph=e,this.options=t,this.bundle=null,this.facadeChunkByModule=null,this.outputOptions=null,this.assertAssetsFinalized=()=>{for(const[t,i]of this.filesByReferenceId)if("asset"===i.type&&"string"!=typeof i.fileName)return pe((e=i.name||t,{code:me.ASSET_SOURCE_MISSING,message:`Plugin error creating asset "${e}" - no asset source set.`}));var e},this.emitFile=e=>function(e){return Boolean(e&&("asset"===e.type||"chunk"===e.type))}(e)?function(e){const t=e.fileName||e.name;return!t||"string"==typeof t&&!ce(t)}(e)?"chunk"===e.type?this.emitChunk(e):this.emitAsset(e):pe(Ae(`The "fileName" or "name" properties of emitted files must be strings that are neither absolute nor relative paths, received "${e.fileName||e.name}".`)):pe(Ae(`Emitted files must be of type "asset" or "chunk", received "${e&&e.type}".`)),this.getFileName=e=>{const t=this.filesByReferenceId.get(e);return t?"chunk"===t.type?nl(t,this.facadeChunkByModule):sl(t,e):pe((i=e,{code:me.FILE_NOT_FOUND,message:`Plugin error - Unable to get file name for unknown file "${i}".`}));var i},this.setAssetSource=(e,t)=>{const i=this.filesByReferenceId.get(e);if(!i)return pe((s=e,{code:me.ASSET_NOT_FOUND,message:`Plugin error - Unable to set the source for unknown asset "${s}".`}));var s,n;if("asset"!==i.type)return pe(Ae(`Asset sources can only be set for emitted assets but "${e}" is an emitted chunk.`));if(void 0!==i.source)return pe((n=i.name||e,{code:me.ASSET_SOURCE_ALREADY_SET,message:`Unable to set the source for asset "${n}", source already set.`}));const r=il(t,i,e);this.bundle?this.finalizeAsset(i,r,e,this.bundle):i.source=r},this.setOutputBundle=(e,t,i)=>{this.outputOptions=t,this.bundle=e,this.facadeChunkByModule=i;for(const{fileName:t}of this.filesByReferenceId.values())t&&tl(t,e,this.options.onwarn);for(const[t,i]of this.filesByReferenceId)"asset"===i.type&&void 0!==i.source&&this.finalizeAsset(i,i.source,t,e)},this.filesByReferenceId=i?new Map(i.filesByReferenceId):new Map}assignReferenceId(e,t){let i;do{i=vr().update(i||t).digest("hex").substring(0,8)}while(this.filesByReferenceId.has(i));return this.filesByReferenceId.set(i,e),i}emitAsset(e){const t=void 0!==e.source?il(e.source,e,null):void 0,i={fileName:e.fileName,name:e.name,source:t,type:"asset"},s=this.assignReferenceId(i,e.fileName||e.name||e.type);return this.bundle&&(e.fileName&&tl(e.fileName,this.bundle,this.options.onwarn),void 0!==t&&this.finalizeAsset(i,t,s,this.bundle)),s}emitChunk(e){if(this.graph.phase>Gs.LOAD_AND_PARSE)return pe({code:me.INVALID_ROLLUP_PHASE,message:"Cannot emit chunks after module loading has finished."});if("string"!=typeof e.id)return pe(Ae(`Emitted chunks need to have a valid string id, received "${e.id}"`));const t={fileName:e.fileName,module:null,name:e.name||e.id,type:"chunk"};return this.graph.moduleLoader.emitChunk(e).then((e=>t.module=e)).catch((()=>{})),this.assignReferenceId(t,e.id)}finalizeAsset(e,t,i,s){const n=e.fileName||function(e,t){for(const[i,s]of Object.entries(e))if("asset"===s.type&&al(t,s.source))return i;return null}(s,t)||function(e,t,i,s){const n=i.sanitizeFileName(e||"asset");return Lr(Dr("function"==typeof i.assetFileNames?i.assetFileNames({name:e,source:t,type:"asset"}):i.assetFileNames,"output.assetFileNames",{ext:()=>$(n).substring(1),extname:()=>$(n),hash:()=>vr().update(n).update(":").update(t).digest("hex").substring(0,8),name:()=>n.substring(0,n.length-$(n).length)}),s)}(e.name,t,this.outputOptions,s),r={...e,fileName:n,source:t};this.filesByReferenceId.set(i,r);const{options:a}=this;s[n]={fileName:n,get isAsset(){return Pe('Accessing "isAsset" on files in the bundle is deprecated, please use "type === \'asset\'" instead',!0,a),!0},name:e.name,source:t,type:"asset"}}}function al(e,t){if("string"==typeof e)return e===t;if("string"==typeof t)return!1;if("equals"in e)return e.equals(t);if(e.length!==t.length)return!1;for(let i=0;i<e.length;i++)if(e[i]!==t[i])return!1;return!0}function ol(e,t,i,s,n,r){let a=!1;return(...o)=>(a||(a=!0,Pe({message:`The "this.${t}" plugin context function used by plugin ${s} is deprecated. The "this.${i}" plugin context function should be used instead.`,plugin:s},n,r)),e(...o))}function ll(e,t,i,s,n,r){let a,o=!0;if("string"!=typeof e.cacheKey&&(e.name.startsWith("at position ")||e.name.startsWith("at output position ")||r.has(e.name)?o=!1:r.add(e.name)),t)if(o){const i=e.cacheKey||e.name;h=t[i]||(t[i]=Object.create(null)),a={delete:e=>delete h[e],get(e){const t=h[e];if(t)return t[0]=0,t[1]},has(e){const t=h[e];return!!t&&(t[0]=0,!0)},set(e,t){h[e]=[0,t]}}}else l=e.name,a={delete:()=>qo(l),get:()=>qo(l),has:()=>qo(l),set:()=>qo(l)};else a=Wo;var l,h;return{addWatchFile(e){if(i.phase>=Gs.GENERATE)return this.error({code:me.INVALID_ROLLUP_PHASE,message:"Cannot call addWatchFile after the build has finished."});i.watchFiles[e]=!0},cache:a,emitAsset:ol(((e,t)=>n.emitFile({name:e,source:t,type:"asset"})),"emitAsset","emitFile",e.name,!0,s),emitChunk:ol(((e,t)=>n.emitFile({id:e,name:t&&t.name,type:"chunk"})),"emitChunk","emitFile",e.name,!0,s),emitFile:n.emitFile.bind(n),error:t=>Go(t,e.name),getAssetFileName:ol(n.getFileName,"getAssetFileName","getFileName",e.name,!0,s),getChunkFileName:ol(n.getFileName,"getChunkFileName","getFileName",e.name,!0,s),getFileName:n.getFileName,getModuleIds:()=>i.modulesById.keys(),getModuleInfo:i.getModuleInfo,getWatchFiles:()=>Object.keys(i.watchFiles),isExternal:ol(((e,t,i=!1)=>s.external(e,t,i)),"isExternal","resolve",e.name,!0,s),load:e=>i.moduleLoader.preloadModule(e),meta:{rollupVersion:"2.79.1",watchMode:i.watchMode},get moduleIds(){const t=i.modulesById.keys();return function*(){Pe({message:`Accessing "this.moduleIds" on the plugin context by plugin ${e.name} is deprecated. The "this.getModuleIds" plugin context function should be used instead.`,plugin:e.name},!1,s),yield*t}()},parse:i.contextParse.bind(i),resolve:(t,s,{custom:n,isEntry:r,skipSelf:a}=ie)=>i.moduleLoader.resolveId(t,s,n,r,a?[{importer:s,plugin:e,source:t}]:null),resolveId:ol(((e,t)=>i.moduleLoader.resolveId(e,t,ie,void 0).then((e=>e&&e.id))),"resolveId","resolve",e.name,!0,s),setAssetSource:n.setAssetSource,warn(t){"string"==typeof t&&(t={message:t}),t.code&&(t.pluginCode=t.code),t.code="PLUGIN_WARNING",t.plugin=e.name,s.onwarn(t)}}}const hl=Object.keys({buildEnd:1,buildStart:1,closeBundle:1,closeWatcher:1,load:1,moduleParsed:1,options:1,resolveDynamicImport:1,resolveId:1,shouldTransformCachedModule:1,transform:1,watchChange:1});class cl{constructor(e,t,i,s,n){this.graph=e,this.options=t,this.pluginCache=s,this.sortedPlugins=new Map,this.unfulfilledActions=new Set,function(e,t){for(const{active:i,deprecated:s,replacement:n}of Ho)for(const r of e)s in r&&Pe({message:`The "${s}" hook used by plugin ${r.name} is deprecated. The "${n}" hook should be used instead.`,plugin:r.name},i,t)}(i,t),this.fileEmitter=new rl(e,t,n&&n.fileEmitter),this.emitFile=this.fileEmitter.emitFile.bind(this.fileEmitter),this.getFileName=this.fileEmitter.getFileName.bind(this.fileEmitter),this.finaliseAssets=this.fileEmitter.assertAssetsFinalized.bind(this.fileEmitter),this.setOutputBundle=this.fileEmitter.setOutputBundle.bind(this.fileEmitter),this.plugins=i.concat(n?n.plugins:[]);const r=new Set;if(this.pluginContexts=new Map(this.plugins.map((i=>[i,ll(i,s,e,t,this.fileEmitter,r)]))),n)for(const e of i)for(const i of hl)i in e&&t.onwarn((a=e.name,o=i,{code:me.INPUT_HOOK_IN_OUTPUT_PLUGIN,message:`The "${o}" hook used by the output plugin ${a} is a build time hook and will not be run for that plugin. Either this plugin cannot be used as an output plugin, or it should have an option to configure it as an output plugin.`}));var a,o}createOutputPluginDriver(e){return new cl(this.graph,this.options,e,this.pluginCache,this)}getUnfulfilledHookActions(){return this.unfulfilledActions}hookFirst(e,t,i,s){let n=Promise.resolve(null);for(const r of this.getSortedPlugins(e))s&&s.has(r)||(n=n.then((s=>null!=s?s:this.runHook(e,t,r,i))));return n}hookFirstSync(e,t,i){for(const s of this.getSortedPlugins(e)){const n=this.runHookSync(e,t,s,i);if(null!=n)return n}return null}async hookParallel(e,t,i){const s=[];for(const n of this.getSortedPlugins(e))n[e].sequential?(await Promise.all(s),s.length=0,await this.runHook(e,t,n,i)):s.push(this.runHook(e,t,n,i));await Promise.all(s)}hookReduceArg0(e,[t,...i],s,n){let r=Promise.resolve(t);for(const t of this.getSortedPlugins(e))r=r.then((r=>this.runHook(e,[r,...i],t,n).then((e=>s.call(this.pluginContexts.get(t),r,e,t)))));return r}hookReduceArg0Sync(e,[t,...i],s,n){for(const r of this.getSortedPlugins(e)){const a=[t,...i],o=this.runHookSync(e,a,r,n);t=s.call(this.pluginContexts.get(r),t,o,r)}return t}async hookReduceValue(e,t,i,s){const n=[],r=[];for(const t of this.getSortedPlugins(e,pl))t[e].sequential?(n.push(...await Promise.all(r)),r.length=0,n.push(await this.runHook(e,i,t))):r.push(this.runHook(e,i,t));return n.push(...await Promise.all(r)),n.reduce(s,await t)}hookReduceValueSync(e,t,i,s,n){let r=t;for(const t of this.getSortedPlugins(e)){const a=this.runHookSync(e,i,t,n);r=s.call(this.pluginContexts.get(t),r,a,t)}return r}hookSeq(e,t,i){let s=Promise.resolve();for(const n of this.getSortedPlugins(e))s=s.then((()=>this.runHook(e,t,n,i)));return s.then(fl)}getSortedPlugins(e,t){return R(this.sortedPlugins,e,(()=>ul(e,this.plugins,t)))}runHook(e,t,i,s){const n=i[e],r="object"==typeof n?n.handler:n;let a=this.pluginContexts.get(i);s&&(a=s(a,i));let o=null;return Promise.resolve().then((()=>{if("function"!=typeof r)return r;const s=r.apply(a,t);return(null==s?void 0:s.then)?(o=[i.name,e,t],this.unfulfilledActions.add(o),Promise.resolve(s).then((e=>(this.unfulfilledActions.delete(o),e)))):s})).catch((t=>(null!==o&&this.unfulfilledActions.delete(o),Go(t,i.name,{hook:e}))))}runHookSync(e,t,i,s){const n=i[e],r="object"==typeof n?n.handler:n;let a=this.pluginContexts.get(i);s&&(a=s(a,i));try{return r.apply(a,t)}catch(t){return Go(t,i.name,{hook:e})}}}function ul(e,t,i=dl){const s=[],n=[],r=[];for(const a of t){const t=a[e];if(t){if("object"==typeof t){if(i(t.handler,e,a),"pre"===t.order){s.push(a);continue}if("post"===t.order){r.push(a);continue}}else i(t,e,a);n.push(a)}}return[...s,...n,...r]}function dl(e,t,i){"function"!=typeof e&&pe(function(e,t){return{code:me.INVALID_PLUGIN_HOOK,hook:e,message:`Error running plugin hook ${e} for plugin ${t}, expected a function hook or an object with a "handler" function.`,plugin:t}}(t,i.name))}function pl(e,t,i){if("string"!=typeof e&&"function"!=typeof e)return pe(function(e,t){return{code:me.INVALID_PLUGIN_HOOK,hook:e,message:`Error running plugin hook ${e} for plugin ${t}, expected a string, a function hook or an object with a "handler" string or function.`,plugin:t}}(t,i.name))}function fl(){}class ml{constructor(e){this.maxParallel=e,this.queue=[],this.workerCount=0}run(e){return new Promise(((t,i)=>{this.queue.push({reject:i,resolve:t,task:e}),th# pretty-format

Stringify any JavaScript value.

- Serialize built-in JavaScript types.
- Serialize application-specific data types with built-in or user-defined plugins.

## Installation

```sh
$ yarn add pretty-format
```

## Usage

```js
const {format: prettyFormat} = require('pretty-format'); // CommonJS
```

```js
import {format as prettyFormat} from 'pretty-format'; // ES2015 modules
```

```js
const val = {object: {}};
val.circularReference = val;
val[Symbol('foo')] = 'foo';
val.map = new Map([['prop', 'value']]);
val.array = [-0, Infinity, NaN];

console.log(prettyFormat(val));
/*
Object {
  "array": Array [
    -0,
    Infinity,
    NaN,
  ],
  "circularReference": [Circular],
  "map": Map {
    "prop" => "value",
  },
  "object": Object {},
  Symbol(foo): "foo",
}
*/
```

## Usage with options

```js
function onClick() {}

console.log(prettyFormat(onClick));
/*
[Function onClick]
*/

const options = {
  printFunctionName: false,
};
console.log(prettyFormat(onClick, options));
/*
[Function]
*/
```

<!-- prettier-ignore -->
| key                   | type      | default    | description                                             |
| :-------------------- | :-------- | :--------- | :------------------------------------------------------ |
| `callToJSON`          | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |
| `compareKeys`         | `function`| `undefined`| compare function used when sorting object keys          |
| `escapeRegex`         | `boolean` | `false`    | escape special characters in regular expressions        |
| `escapeString`        | `boolean` | `true`     | escape special characters in strings                    |
| `highlight`           | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |
| `indent`              | `number`  | `2`        | spaces in each level of indentation                     |
| `maxDepth`            | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |
| `min`                 | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |
| `plugins`             | `array`   | `[]`       | plugins to serialize application-specific data types    |
| `printBasicPrototype` | `boolean` | `false`    | print the prototype for plain objects and arrays        |
| `printFunctionName`   | `boolean` | `true`     | include or omit the name of a function                  |
| `theme`               | `obj